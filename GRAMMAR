# Parts placed inside [ and ] are optional
# * means zero or more
# | means or


# THING: context depedent, for instance const string s = THING;
# THING here refers to an arbitrary srting

SINGLE_LINE_COMMENT: '##' THING
MULTI_LINE_COMMENT: '\#' THING '\#'

DATATYPE: 'int' | 'float' | 'string' | 'boolean' | 'array'
# Up to now arrays are static
# array s[3] = [0, 1, 2]
ARRAY_DECLARATION: array NAME [ '[' POSITIVE_INTEGER ']' ] [ '=' '[' THING [ ',' THING ]* ']' ] [ ';' ]
# const string a = 'String'
# int x = 12345;
# float y = 12/.345534;

# LETTER: small/capital alphabet letter
# DIGIT: a single decimal digit  
NAME: ( _ | LETTER ) ( _ | LETTER | DIGIT )*

END_STATEMENT: 'end' [ '"' THING '"' ]

VAR_CONST_DECLARATION: [ 'const' ] DATATYPE NAME [ [ '=' THING ] [ ';' ] ]

STATEMENT: VAR_CONST_DECLARATION | IF_STATEMENT | WHILE_STATEMENT | FOREACH_STATEMENT | BREAK_STATEMENT | CONTINUE_STATEMENT | RETURN_STATEMENT

SUITE: NEWLINE INDENT STATEMENT+ DEDENT NEWLINE

IF_STATEMENT: [ 'branch' | 'if' ] NAME NEWLINE INDENT [ 'case' | 'if' ] CONDITION [ 'do' ] SUITE [ END_STATEMENT ] DEDENT END_STATEMENT

WHILE_STATEMENT: 'while' CONDITION [ ['is'] 'true' ] [ 'do' ] SUITE END_STATEMENT

FOREACH_STATEMENT: [ 'for' | 'foreach' ] NAME 'in' ITERABLE [ 'do' ] SUITE END_STATEMENT

BREAK_STATEMENT: 'break' [ '"' THING '"' ]
CONTINUE_STATEMENT: 'continue' [ '"' THING '"' ]
RETURN_STATEMENT: 'return' THING

FUNCTION_DEFINITION: 'function' FUNCTION_NAME '(' VAR_CONST_DECLARATION* [ ',' VAR_CONST_DECLARATION]* ')' 'returns' DATATYPE '=>' '{' SUITE '}'

write("{} sfkdlgkl; {} dgjkjdgk" % n0 n1 ... nn)
# write(x0, x1, ..., xn) => 
# write("hello {1} {0}", "1", "world") => hello world 1
#
#
read("{} sfkdlgkl; {} dgjkjdgk" % n0 n1 ... nn)
#
