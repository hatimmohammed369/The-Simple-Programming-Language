# this is a single line comment

# un-initialized, x is null
const string x;

# semi-colon is optional
write(x)

x = "Hello" + " " + "world!";
write("{} is a string, {} is also a number" % x 123456)
write("{} is a string, {} is also a number", x, 123456)

const int n := 1234;

float r;
read("float {}" % r);
write(r);

read("floating-point {}", r);
write("input " + string(r));

function recursive_fib(int n) returns int => {
    match n
        case 0 or 1:
            return 1
    end "branch n"
    return recursive_fib(n-1) + recursive_fib(n-1)
}

function for_fib(int n) returns int => {
    int a, b := 0, 1;
    foreach j in range(1, n) do
        a, b = b, a+b
    end "for"
    return a
}

function while_fib(int n) returns int => {
    int a, b := 0, 1;
    int j;
    j = 0;
    while j < n is true
        a, b = b, a+b
    ene "while j < n"
    return a
}

int j := 0;
while true
    match n:
        case 5:
            continue "while true"
        case 10:
            break "while true"
        else:
            write("fib({}) = {}" % j fib(j))
    end "branch n"
end "while true"
n = 12;# const re-assignment illegal


Token(COMMENT, '# this is a single line comment', (0, 0)-(0, 31))
Token(NEWLINE, '\n', (0, 31)-(0, 32))
Token(NEWLINE, '\n', (1, 1)-(1, 2))
Token(KEYWORD, 'const', (2, 0)-(2, 66))
Token(KEYWORD, 'string', (2, 6)-(2, 73))
Token(CONST_NAME, 'x', (2, 13)-(2, 75))
Token(SEMICOLON, ';', (2, 14)-(2, 15))
Token(NEWLINE, '\n', (2, 15)-(2, 16))
Token(NEWLINE, '\n', (3, 1)-(3, 2))
Token(NAME, 'write', (4, 0)-(4, 108))
Token(LEFT_PARENTHESES, '(', (4, 5)-(4, 6))
Token(CONST_NAME, 'x', (4, 6)-(4, 110))
Token(RIGHT_PARENTHESES, ')', (4, 7)-(4, 8))
Token(NEWLINE, '\n', (4, 8)-(4, 9))
Token(NEWLINE, '\n', (5, 1)-(5, 2))
Token(NAME, 'write', (6, 0)-(6, 148))
Token(LEFT_PARENTHESES, '(', (6, 5)-(6, 6))
Token(STRING, '"{} is a string, {} is also a number"', (6, 6)-(6, 43))
Token(PERCENT, '%', (6, 44)-(6, 45))
Token(CONST_NAME, 'x', (6, 46)-(6, 190))
Token(NUMBER, 123456, (6, 48)-(6, 54))
Token(RIGHT_PARENTHESES, ')', (6, 54)-(6, 55))
Token(NEWLINE, '\n', (6, 55)-(6, 56))
Token(NAME, 'write', (7, 0)-(7, 204))
Token(LEFT_PARENTHESES, '(', (7, 5)-(7, 6))
Token(STRING, '"{} is a string, {} is also a number"', (7, 6)-(7, 43))
Token(COMMA, ',', (7, 43)-(7, 44))
Token(CONST_NAME, 'x', (7, 45)-(7, 245))
Token(COMMA, ',', (7, 46)-(7, 47))
Token(NUMBER, 123456, (7, 48)-(7, 54))
Token(RIGHT_PARENTHESES, ')', (7, 54)-(7, 55))
Token(NEWLINE, '\n', (7, 55)-(7, 56))
Token(NEWLINE, '\n', (8, 1)-(8, 2))
Token(NEWLINE, '\n', (9, 1)-(9, 2))
Token(NAME, 'read', (10, 0)-(10, 291))
Token(LEFT_PARENTHESES, '(', (10, 4)-(10, 5))
Token(STRING, '"float {}"', (10, 5)-(10, 15))
Token(PERCENT, '%', (10, 16)-(10, 17))
Token(NAME, 'r', (10, 18)-(10, 306))
Token(RIGHT_PARENTHESES, ')', (10, 19)-(10, 20))
Token(SEMICOLON, ';', (10, 20)-(10, 21))
Token(NEWLINE, '\n', (10, 21)-(10, 22))
Token(NAME, 'write', (11, 0)-(11, 314))
Token(LEFT_PARENTHESES, '(', (11, 5)-(11, 6))
Token(NAME, 'r', (11, 6)-(11, 316))
Token(RIGHT_PARENTHESES, ')', (11, 7)-(11, 8))
Token(SEMICOLON, ';', (11, 8)-(11, 9))
Token(NEWLINE, '\n', (11, 9)-(11, 10))
Token(NEWLINE, '\n', (12, 1)-(12, 2))
Token(NAME, 'write', (13, 0)-(13, 355))
Token(LEFT_PARENTHESES, '(', (13, 5)-(13, 6))
Token(STRING, '"input "', (13, 6)-(13, 14))
Token(PLUS, '+', (13, 15)-(13, 16))
Token(KEYWORD, 'string', (13, 17)-(13, 373))
Token(LEFT_PARENTHESES, '(', (13, 23)-(13, 24))
Token(NAME, 'r', (13, 24)-(13, 375))
Token(RIGHT_PARENTHESES, ')', (13, 25)-(13, 26))
Token(RIGHT_PARENTHESES, ')', (13, 26)-(13, 27))
Token(SEMICOLON, ';', (13, 27)-(13, 28))
Token(NEWLINE, '\n', (13, 28)-(13, 29))
Token(NEWLINE, '\n', (14, 1)-(14, 2))
Token(INDENT, '    ', (15, 0)-(15, 4))
Token(KEYWORD, 'match', (15, 4)-(15, 436))
Token(NAME, 'n', (15, 10)-(15, 438))
Token(NEWLINE, '\n', (15, 11)-(15, 12))
Token(INDENT, '        ', (16, 0)-(16, 8))
Token(KEYWORD, 'case', (16, 8)-(16, 451))
Token(NUMBER, 0, (16, 13)-(16, 14))
Token(KEYWORD, 'or', (16, 15)-(16, 456))
Token(NUMBER, 1, (16, 18)-(16, 19))
Token(COLON, ':', (16, 19)-(16, 20))
Token(NEWLINE, '\n', (16, 20)-(16, 21))
Token(INDENT, '            ', (17, 0)-(17, 12))
Token(KEYWORD, 'return', (17, 12)-(17, 478))
Token(NUMBER, 1, (17, 19)-(17, 20))
Token(NEWLINE, '\n', (17, 20)-(17, 21))
Token(DEDENT, '    ', (18, 0)-(18, 4))
Token(KEYWORD, 'end', (18, 4)-(18, 488))
Token(END_LABEL, '"branch n"', (18, 8)-(18, 18))
Token(NEWLINE, '\n', (18, 18)-(18, 19))
Token(DEDENT, '    ', (19, 0)-(19, 4))
Token(KEYWORD, 'return', (19, 4)-(19, 510))
Token(NAME, 'recursive_fib', (19, 11)-(19, 524))
Token(LEFT_PARENTHESES, '(', (19, 24)-(19, 25))
Token(NAME, 'n', (19, 25)-(19, 526))
Token(MINUS, '-', (19, 26)-(19, 27))
Token(NUMBER, 1, (19, 27)-(19, 28))
Token(RIGHT_PARENTHESES, ')', (19, 28)-(19, 29))
Token(PLUS, '+', (19, 30)-(19, 31))
Token(NAME, 'recursive_fib', (19, 32)-(19, 545))
Token(LEFT_PARENTHESES, '(', (19, 45)-(19, 46))
Token(NAME, 'n', (19, 46)-(19, 547))
Token(MINUS, '-', (19, 47)-(19, 48))
Token(NUMBER, 1, (19, 48)-(19, 49))
Token(RIGHT_PARENTHESES, ')', (19, 49)-(19, 50))
Token(NEWLINE, '\n', (19, 50)-(19, 51))
Token(DEDENT, '', (20, 0)-(20, 0))
Token(RIGHT_CURLY_BRACE, '}', (20, 0)-(20, 1))
Token(NEWLINE, '\n', (20, 1)-(20, 2))
Token(NEWLINE, '\n', (21, 1)-(21, 2))
Token(INDENT, '    ', (22, 0)-(22, 4))
Token(KEYWORD, 'int', (22, 4)-(22, 602))
Token(NAME, 'a', (22, 8)-(22, 604))
Token(COMMA, ',', (22, 9)-(22, 10))
Token(NAME, 'b', (22, 11)-(22, 607))
Token(COLON_EQUAL, ':=', (22, 13)-(22, 15))
Token(NUMBER, 0, (22, 16)-(22, 17))
Token(COMMA, ',', (22, 17)-(22, 18))
Token(NUMBER, 1, (22, 19)-(22, 20))
Token(SEMICOLON, ';', (22, 20)-(22, 21))
Token(NEWLINE, '\n', (22, 21)-(22, 22))
Token(KEYWORD, 'foreach', (23, 4)-(23, 628))
Token(NAME, 'j', (23, 12)-(23, 630))
Token(NAME, 'in', (23, 14)-(23, 633))
Token(NAME, 'range', (23, 17)-(23, 639))
Token(LEFT_PARENTHESES, '(', (23, 22)-(23, 23))
Token(NUMBER, 1, (23, 23)-(23, 24))
Token(COMMA, ',', (23, 24)-(23, 25))
Token(NAME, 'n', (23, 26)-(23, 644))
Token(RIGHT_PARENTHESES, ')', (23, 27)-(23, 28))
Token(KEYWORD, 'do', (23, 29)-(23, 648))
Token(NEWLINE, '\n', (23, 31)-(23, 32))
Token(INDENT, '        ', (24, 0)-(24, 8))
Token(NAME, 'a', (24, 8)-(24, 658))
Token(COMMA, ',', (24, 9)-(24, 10))
Token(NAME, 'b', (24, 11)-(24, 661))
Token(EQUAL, '=', (24, 13)-(24, 14))
Token(NAME, 'b', (24, 15)-(24, 665))
Token(COMMA, ',', (24, 16)-(24, 17))
Token(NAME, 'a', (24, 18)-(24, 668))
Token(PLUS, '+', (24, 19)-(24, 20))
Token(NAME, 'b', (24, 20)-(24, 670))
Token(NEWLINE, '\n', (24, 21)-(24, 22))
Token(DEDENT, '    ', (25, 0)-(25, 4))
Token(KEYWORD, 'end', (25, 4)-(25, 678))
Token(END_LABEL, '"for"', (25, 8)-(25, 13))
Token(NEWLINE, '\n', (25, 13)-(25, 14))
Token(KEYWORD, 'return', (26, 4)-(26, 695))
Token(NAME, 'a', (26, 11)-(26, 697))
Token(NEWLINE, '\n', (26, 12)-(26, 13))
Token(DEDENT, '', (27, 0)-(27, 0))
Token(RIGHT_CURLY_BRACE, '}', (27, 0)-(27, 1))
Token(NEWLINE, '\n', (27, 1)-(27, 2))
Token(NEWLINE, '\n', (28, 1)-(28, 2))
Token(INDENT, '    ', (29, 0)-(29, 4))
Token(KEYWORD, 'int', (29, 4)-(29, 751))
Token(NAME, 'a', (29, 8)-(29, 753))
Token(COMMA, ',', (29, 9)-(29, 10))
Token(NAME, 'b', (29, 11)-(29, 756))
Token(COLON_EQUAL, ':=', (29, 13)-(29, 15))
Token(NUMBER, 0, (29, 16)-(29, 17))
Token(COMMA, ',', (29, 17)-(29, 18))
Token(NUMBER, 1, (29, 19)-(29, 20))
Token(SEMICOLON, ';', (29, 20)-(29, 21))
Token(NEWLINE, '\n', (29, 21)-(29, 22))
Token(KEYWORD, 'int', (30, 4)-(30, 773))
Token(NAME, 'j', (30, 8)-(30, 775))
Token(SEMICOLON, ';', (30, 9)-(30, 10))
Token(NEWLINE, '\n', (30, 10)-(30, 11))
Token(NAME, 'j', (31, 4)-(31, 782))
Token(EQUAL, '=', (31, 6)-(31, 7))
Token(NUMBER, 0, (31, 8)-(31, 9))
Token(SEMICOLON, ';', (31, 9)-(31, 10))
Token(NEWLINE, '\n', (31, 10)-(31, 11))
Token(KEYWORD, 'while', (32, 4)-(32, 797))
Token(NAME, 'j', (32, 10)-(32, 799))
Token(LESS, '<', (32, 12)-(32, 13))
Token(NAME, 'n', (32, 14)-(32, 803))
Token(KEYWORD, 'is', (32, 16)-(32, 806))
Token(KEYWORD, 'true', (32, 19)-(32, 811))
Token(NEWLINE, '\n', (32, 23)-(32, 24))
Token(INDENT, '        ', (33, 0)-(33, 8))
Token(NAME, 'a', (33, 8)-(33, 821))
Token(COMMA, ',', (33, 9)-(33, 10))
Token(NAME, 'b', (33, 11)-(33, 824))
Token(EQUAL, '=', (33, 13)-(33, 14))
Token(NAME, 'b', (33, 15)-(33, 828))
Token(COMMA, ',', (33, 16)-(33, 17))
Token(NAME, 'a', (33, 18)-(33, 831))
Token(PLUS, '+', (33, 19)-(33, 20))
Token(NAME, 'b', (33, 20)-(33, 833))
Token(NEWLINE, '\n', (33, 21)-(33, 22))
Token(DEDENT, '    ', (34, 0)-(34, 4))
Token(NAME, 'ene', (34, 4)-(34, 841))
Token(STRING, '"while j < n"', (34, 8)-(34, 21))
Token(NEWLINE, '\n', (34, 21)-(34, 22))
Token(KEYWORD, 'return', (35, 4)-(35, 866))
Token(NAME, 'a', (35, 11)-(35, 868))
Token(NEWLINE, '\n', (35, 12)-(35, 13))
Token(DEDENT, '', (36, 0)-(36, 0))
Token(RIGHT_CURLY_BRACE, '}', (36, 0)-(36, 1))
Token(NEWLINE, '\n', (36, 1)-(36, 2))
Token(NEWLINE, '\n', (37, 1)-(37, 2))
Token(KEYWORD, 'while', (38, 0)-(38, 889))
Token(KEYWORD, 'true', (38, 6)-(38, 894))
Token(NEWLINE, '\n', (38, 10)-(38, 11))
Token(INDENT, '    ', (39, 0)-(39, 4))
Token(KEYWORD, 'match', (39, 4)-(39, 904))
Token(NAME, 'n', (39, 10)-(39, 906))
Token(COLON, ':', (39, 11)-(39, 12))
Token(NEWLINE, '\n', (39, 12)-(39, 13))
Token(INDENT, '        ', (40, 0)-(40, 8))
Token(KEYWORD, 'case', (40, 8)-(40, 920))
Token(NUMBER, 5, (40, 13)-(40, 14))
Token(COLON, ':', (40, 14)-(40, 15))
Token(NEWLINE, '\n', (40, 15)-(40, 16))
Token(INDENT, '            ', (41, 0)-(41, 12))
Token(KEYWORD, 'continue', (41, 12)-(41, 944))
Token(STRING, '"while true"', (41, 21)-(41, 33))
Token(NEWLINE, '\n', (41, 33)-(41, 34))
Token(DEDENT, '        ', (42, 0)-(42, 8))
Token(KEYWORD, 'case', (42, 8)-(42, 970))
Token(NUMBER, 10, (42, 13)-(42, 15))
Token(COLON, ':', (42, 15)-(42, 16))
Token(NEWLINE, '\n', (42, 16)-(42, 17))
Token(INDENT, '            ', (43, 0)-(43, 12))
Token(KEYWORD, 'break', (43, 12)-(43, 992))
Token(STRING, '"while true"', (43, 18)-(43, 30))
Token(NEWLINE, '\n', (43, 30)-(43, 31))
Token(DEDENT, '        ', (44, 0)-(44, 8))
Token(NAME, 'else', (44, 8)-(44, 1018))
Token(COLON, ':', (44, 12)-(44, 13))
Token(NEWLINE, '\n', (44, 13)-(44, 14))
Token(INDENT, '            ', (45, 0)-(45, 12))
Token(NAME, 'write', (45, 12)-(45, 1037))
Token(LEFT_PARENTHESES, '(', (45, 17)-(45, 18))
Token(STRING, '"fib({}) = {}"', (45, 18)-(45, 32))
Token(PERCENT, '%', (45, 33)-(45, 34))
Token(NAME, 'j', (45, 35)-(45, 1056))
Token(NAME, 'fib', (45, 37)-(45, 1060))
Token(LEFT_PARENTHESES, '(', (45, 40)-(45, 41))
Token(NAME, 'j', (45, 41)-(45, 1062))
Token(RIGHT_PARENTHESES, ')', (45, 42)-(45, 43))
Token(RIGHT_PARENTHESES, ')', (45, 43)-(45, 44))
Token(NEWLINE, '\n', (45, 44)-(45, 45))
Token(DEDENT, '    ', (46, 0)-(46, 4))
Token(KEYWORD, 'end', (46, 4)-(46, 1072))
Token(END_LABEL, '"branch n"', (46, 8)-(46, 18))
Token(NEWLINE, '\n', (46, 18)-(46, 19))
Token(DEDENT, '', (47, 0)-(47, 0))
Token(KEYWORD, 'end', (47, 0)-(47, 1087))
Token(END_LABEL, '"while true"', (47, 4)-(47, 16))
Token(NEWLINE, '\n', (47, 16)-(47, 17))
Token(DEDENT, '', (48, 0)-(48, 0))
Token(NAME, 'n', (48, 0)-(48, 1102))
Token(EQUAL, '=', (48, 2)-(48, 3))
Token(NUMBER, 12, (48, 4)-(48, 6))
Token(SEMICOLON, ';', (48, 6)-(48, 7))
Token(COMMENT, '# const re-assignment illegal', (48, 7)-(48, 36))
Token(NEWLINE, '\n', (48, 36)-(48, 37))
Token(NEWLINE, '\n', (49, 1)-(49, 2))
Lines:

0
1
31
2
60
3
76
4
102
5
111
6
142
7
198
8
254
9
276
10
286
11
308
12
318
13
349
14
378
15
426
16
438
17
459
18
480
19
499
20
550
21
552
22
594
23
616
24
648
25
670
26
684
27
697
28
699
29
743
30
765
776
32
787
33
811
34
833
35
855
36
868
37
870
38
883
39
894
40
907
41
923
42
957
43
974
44
1005
45
1019
46
1064
47
1083
48
1100
49
1137
