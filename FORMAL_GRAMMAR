STATEMENT: ( SMALL_STATEMENT | BLOCK_STATEMENT ) [ [';'] LINE_BREAK | ';' ]

SMALL_STATEMENT: PASS_STATEMENT | OPERATOR_STATEMENT | RETURN_STATEMENT | BREAK_STATEMENT | 
    CONTINUE_STATEMENT | FUNCTION_CALL | NAME_DECLARATION

PASS_STATEMENT: 'pass'

OPERATOR_STATEMENT: EXPRESSION [OPERATOR EXPRESSION]

OPERATOR: ARITHMETIC_OPERATOR | LOGICAL_OPERATOR

LOGICAL_OPERATOR: 'not' | 'and' | 'or' | EQUAL_EQUAL_OPERATOR |'!=' | '>' | '>=' | '<' | '<=' | IDENTITY_OPERATOR

EQUAL_OPERATOR: '=' | '==' | 'is'

IDENTITY_OPERATOR: 'IS'

ARITHMETIC_OPERATOR: MATH_OPERATOR | BITWISE_OPERATOR

MATH_OPERATOR: '+' | '++' | '+=' | '-' | '*' | '**' | '/' | '//'

BITWISE_OPERATOR: '~' | '&' | '|' | '>>' | '<<'

EXPRESSION: LITERAL | NAME | FUNCTION_CALL

LITERAL: NUMBER | STRING

FUNCTION_CALL: NAME '(' [ ARGUMENTS_LIST ] ')'

ARGUMENTS_LIST: ARGUMENT [ ',' ARGUMENT ]

ARGUMENT: [ NAME [ ':' TYPE ] '=' ] EXPRESSION

TYPE: USER_DEFINED_TYPE_NAME | PRIMITIVE_DATA_TYPE_NAME

PRIMITIVE_DATA_TYPE_NAME: 'int' | 'float' | 'string' | 'boolean' | ARRAY_TYPE | 'null'

ARRAY_TYPE: 'array' [ '[' POSITIVE_INTEGER TYPE ']' ]

NAME_DECLARATION: CONST_VAR_DECLARATION | FUNCTION_DECLARATION

CONST_VAR_DECLARATION: [ 'const' ] TYPE [ '&' ] NAME [ '=' EXPRESSION] [';']

FUNCTION_DECLARATION: 'function' NAME [ '(' CONST_VAR_DECLARATION [ ( ';' | ',' ) | CONST_VAR_DECLARATION ] * ')' ]
    [ '->' TYPE ] [ '=>' ] [ '{'] BLOCK ['}' ]

BLOCK: INDENT STATEMENT+ OUTDENT
