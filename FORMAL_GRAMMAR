KEYWORD:
    'IS'       |
    'and'      |
    'array'    |
    'boolean'  |
    'break'    |
    'case'     |
    'const'    |
    'continue' |
    'do'       |
    'end'      |
    'false'    |
    'float'    |
    'foreach'  |
    'function' |
    'if'       |
    'in'       |
    'int'      |
    'is'       |
    'loop'     |
    'match'    |
    'mod'      |
    'not'      |
    'null'     |
    'or'       |
    'return'   |
    'returns'  |
    'string'   |
    'then'     |
    'true'     |
    'while'

STATEMENT: ( SMALL_STATEMENT | BLOCK_STATEMENT ) [ [';'] LINE_BREAK | ';' ]

SMALL_STATEMENT: PASS_STATEMENT | OPERATOR_STATEMENT | RETURN_STATEMENT | BREAK_STATEMENT | 
    CONTINUE_STATEMENT | FUNCTION_CALL | NAME_DECLARATION

PASS_STATEMENT: 'pass'

OPERATOR_STATEMENT: EXPRESSION [OPERATOR EXPRESSION]

OPERATOR: ARITHMETIC_OPERATOR | LOGICAL_OPERATOR

LOGICAL_OPERATOR: 'not' | 'and' | 'or' | EQUAL_EQUAL_OPERATOR |'!=' | '>' | '>=' | '<' | '<=' | IDENTITY_OPERATOR

EQUAL_OPERATOR: ':=' | '=' | '==' | 'is'

IDENTITY_OPERATOR: 'IS'

ARITHMETIC_OPERATOR: MATH_OPERATOR | BITWISE_OPERATOR

MATH_OPERATOR: '+' | '++' | '+=' | '-' | '*' | '**' | '/' | '//'

BITWISE_OPERATOR: '~' | '&' | '|' | '>>' | '<<'

EXPRESSION: LITERAL | NAME | FUNCTION_CALL | ARRAY_EXPRESSION | CONST_VAR_EXPRESSION

EXPRESSION_LIST: EXPRESSION [',' EXPRESSION]*

ARRAY_EXPRESSION: '[' EXPRESSION_LIST ']'

LITERAL: NUMBER | STRING

FUNCTION_CALL: NAME '(' [ FUNCTION_PARAMETERS_LIST ] ')'

FUNCTION_PARAMETERS_LIST: PARAMETER [ ',' PARAMETER ]

PARAMETER: [ NAME [ ':' TYPE ] '=' ] EXPRESSION

TYPE: USER_DEFINED_TYPE_NAME | PRIMITIVE_DATA_TYPE_NAME

PRIMITIVE_DATA_TYPE_NAME: 'int' | 'float' | 'string' | 'boolean' | ARRAY_TYPE | 'null'

ARRAY_TYPE: 'array' [ '[' POSITIVE_INTEGER TYPE ']' ]

NAME_DECLARATION: CONST_VAR_DECLARATION | FUNCTION_STATEMENT

CONST_VAR_DECLARATION_HEADER: [ 'const' ] TYPE | ( TYPE ['&'] | 'const' TYPE )

NAME_LIST: NAME [ ',' NAME ]*

CONST_VAR_DECLARATION: CONST_VAR_DECLARATION_HEADER NAME_LIST [ ':=' EXPRESSION_LIST ] [';']

CONST_VAR_EXPRESSION: CONST_VAR_DECLARATION_HEADER NAME_LIST '=' EXPRESSION_LIST

FUNCTION_STATEMENT: 'function' NAME [ '(' CONST_VAR_EXPRESSION [ ( ';' | ',' ) | CONST_VAR_EXPRESSION ] * ')' ]
    [ '->' TYPE ] [ '=>' ] BLOCK

BLOCK_HEADER: ( 'then' | 'do' | 'then do' ) [ ':' ]

BLOCK: LINE_BREAK INDENT STATEMENT+ OUTDENT LINE_BREAK | '{' LINE_BREAK INDENT STATEMENT+ OUTDENT LINE_BREAK '}'

RETURN_STATEMENT: 'return' EXPRESSION_LIST

BREAK_STATEMENT: 'break'

CONTINUE_STATEMENT: 'continue'

NAME_DECLARATION: CONST_VAR_DECLARATION | CONST_VAR_EXPRESSION | FUNCTION_STATEMENT

BLOCK_STATEMENT: FUNCTION_STATEMENT | CONTROL_FLOW_STATEMENT

CONTROL_FLOW_STATEMENT: IF_STATEMENT | MATCH_STATEMENT | FOREACH_STATEMENT | WHILE_STATEMENT | LOOP_STATEMENT

IF_STATEMENT: 'if' EXPRESSION BLOCK ['else if' EXPRESSION BLOCK] [ 'else' BLOCK ]

MATCH_STATEMENT: 'match' EXPRESSION [ '{' ] 'case' EXPRESSION BLOCK [ 'case' EXPRESSION BLOCK ]* [ ( 'default' | 'else' ) BLOCK ] [ '}' ]

FOREACH_STATEMENT: 'foreach' EXPRESSION_LIST 'in' EXPRESSION_LIST BLOCK

WHILE_STATEMENT: 'while' EXPRESSION BLOCK

LOOP_STATEMENT: 'loop' BLOCK
